#include <stdio.h>

struct Process {
    int pid;  
    int bt;  
    int at;  
    int priority;  
    int wt;  
    int tat;  
};

void calculateTimes(struct Process proc[], int n, int quantum) {

    int total_wt = 0, total_tat = 0;
   
   
    for (int i = 0; i < n; i++) {
        proc[i].wt = 0;
        for (int j = 0; j < n; j++) {
            if (proc[j].at < proc[i].at || (proc[j].at == proc[i].at && proc[j].pid < proc[i].pid)) {
                proc[i].wt += proc[j].bt;
            }
        }
        proc[i].wt -= proc[i].at;
        total_wt += proc[i].wt;
    }

    for (int i = 0; i < n; i++) {
        proc[i].tat = proc[i].bt + proc[i].wt;
        total_tat += proc[i].tat;
    }
   
    // Print the process details
    printf("Process\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].bt, proc[i].at, proc[i].priority, proc[i].wt, proc[i].tat);
    }
   
    // Print average waiting time and average turnaround time
    printf("\nAverage Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

// Function to swap two processes
void swap(struct Process* a, struct Process* b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort the processes based on their burst time (SJF algorithm)
void sortByBurstTime(struct Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].bt > proc[j + 1].bt) {
                swap(&proc[j], &proc[j + 1]);
            }
        }
    }
}

// Function to sort the processes based on their priority (Priority algorithm)
void sortByPriority(struct Process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].priority > proc[j + 1].priority) {
                swap(&proc[j], &proc[j + 1]);
            }
        }
    }
}

// Function to simulate Round Robin scheduling algorithm
void roundRobin(struct Process proc[], int n, int quantum) {
    int rem_bt[n];
    for (int i = 0; i < n; i++) {
        rem_bt[i] = proc[i].bt;
    }

    int t = 0;  
    while (1) {
        int done = 1;  
       
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;  
                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t += rem_bt[i];
                    proc[i].wt = t - proc[i].bt - proc[i].at;
                    rem_bt[i] = 0;
                }
            }
        }

        if (done == 1) {
            break;  
        }
    }

   
    for (int i = 0; i < n; i++) {
        proc[i].tat = proc[i].bt + proc[i].wt;
    }
}

int main() {
    int n;  // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];  // Array to store the processes

    // Input the details of each process
    for (int i = 0; i < n; i++) {
        printf("Process %d\n", i + 1);
        proc[i].pid = i + 1;
        printf("Enter Burst Time: ");
        scanf("%d", &proc[i].bt);
        printf("Enter Arrival Time: ");
        scanf("%d", &proc[i].at);
        printf("Enter Priority: ");
        scanf("%d", &proc[i].priority);
    }

    // Sort the processes based on the scheduling algorithm
    sortByBurstTime(proc, n);  // SJF (Non-preemptive)
    calculateTimes(proc, n, 0);  // Calculate turnaround time and waiting time

    sortByPriority(proc, n);  // Priority (Non-preemptive)
    calculateTimes(proc, n, 0);  // Calculate turnaround time and waiting time

    int quantum;  // Quantum size for Round Robin algorithm
    printf("Enter Quantum Size for Round Robin Algorithm: ");
    scanf("%d", &quantum);
    roundRobin(proc, n, quantum);  // Round Robin
    calculateTimes(proc, n, quantum);  // Calculate turnaround time and waiting time

    return 0;
}
